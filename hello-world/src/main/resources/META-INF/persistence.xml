<persistence
  version="2.1"
  xmlns="http://xmlns.jcp.org/xml/ns/persistence"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
  http://xmlns.jcp.org/xml/ns/persistence_2_1.xsd">

  <!--The persistence.xml file configures at least one persistence unit;
    each unit must have a unique name.-->
  <persistence-unit name="ch02">

    <!--As JPA is only a specification, we need to indicate the vendor-specific Persistence-
    Provider implementation of the API. The persistence we define will be backed by a
    Hibernate provider.-->
    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
    <properties>

      <!--Indicate the JDBC propertiesâ€”the driver.-->
      <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>

      <!--The URL of the database.-->
      <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/CH02?serverTimezone=UTC "/>

      <!--The username.-->
      <property name="javax.persistence.jdbc.user" value="root"/>

      <!--The password.-->
      <property name="javax.persistence.jdbc.password" value="root"/>

      <!--The Hibernate dialect is MySQL8, as the database to interact with is MySQL Release 8.0.-->
      <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL8Dialect"/>

      <!--While executing, show the SQL code.-->
      <property name="hibernate.show_sql" value="true"/>

      <!--Hibernate will format the SQL nicely and generate comments in the SQL string so
      we know why Hibernate executed the SQL statement.-->
      <property name="hibernate.format_sql" value="true"/>

      <!--Every time the program is executed, the database will be created from scratch.
      This is ideal for automated testing, when we want to work with a clean database for
      every test run.-->
      <property name="hibernate.hbm2ddl.auto" value="create"/>
    </properties>
  </persistence-unit>
</persistence>