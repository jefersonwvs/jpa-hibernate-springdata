package com.jefersonwvs.app;

import java.util.List;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import com.jefersonwvs.app.configuration.SpringDataConfiguration;
import com.jefersonwvs.app.entities.Message;
import com.jefersonwvs.app.repositories.MessageRepository;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;

/*
 * Extend the test using SpringExtension . This extension is used to integrate the
 * Spring test context with the JUnit 5 Jupiter test.
 */
@ExtendWith(SpringExtension.class)
/*
 * The Spring test context is configured using the beans defined in the previously
 * presented SpringDataConfiguration class.
 */
@ContextConfiguration(classes = { SpringDataConfiguration.class })
public class HelloWorldSpringDataJPATest {

	/*
	 * A MessageRepository bean is injected by Spring through autowiring. This is possible
	 * as the com.jefersonwvs.app.repositories package where MessageRepository is located
	 * was used as the argument of the @EnableJpaRepositories annotation.
	 */
	@Autowired
	private MessageRepository messageRepository;

	@Test
	public void storeLoadMessage() {

		/*
		 * Create a new instance of the mapped domain model class Message, and set its text
		 * property.
		 */
		Message message = new Message();
		message.setText("Hello World from Spring Data JPA!");

		/*
		 * Persist the message object. The save method is inherited from the CrudReposi-
		 * tory interface, and its body will be generated by Spring Data JPA when the proxy
		 * class is created. It will simply save a Message entity to the database.
		 */
		messageRepository.save(message);

		/*
		 * Retrieve the messages from the repository. The findAll method is inherited from
		 * the CrudRepository interface, and its body will be generated by Spring Data JPA
		 * when the proxy class is created. It will simply return all entities belonging to the
		 * Message class.
		 */
		List<Message> messages = (List<Message>) messageRepository.findAll();

		/*
		 * Use the JUnit 5 assertAll method, which checks all the assertions that are passed
		 * to it, even if some of them fail. The two assertions that we verify are conceptually
		 * related.
		 */
		assertAll(
			/*
			 * Check the size of the list of messages retrieved from the database and that the message
			 * we persisted is in the database.
			 */
			() -> assertEquals(1, messages.size()),
			() -> assertEquals("Hello World from Spring Data JPA!", messages.get(0).getText()));
	}

}